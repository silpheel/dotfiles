# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson
'.source.powershell':
    'Run for each item in array':
        'prefix': 'forEachObject'
        'body': '$<CONTAINER> | ForEach-Object -process {<COMMAND> $_}'
    'Print partial line with color':
        'prefix': 'print'
        'body': 'Write-Host "<MESSAGE>" -nonewline -ForegroundColor "white"'
    'New function':
        'prefix': 'def'
        'body': '''function <FUNCTION_NAME>
        {
        	Param(
        		[Parameter(Mandatory=$true)][string] $<PARAM_NAME>
        	)
          # CODE
        }'''
    'If block':
        'prefix': 'if'
        'body': '''if () {

        }'''
    'If-Else block':
        'prefix': 'ifelse'
        'body': '''if () {

        } else {

        }'''
    'Import common if not done':
        'prefix': 'importcommon'
        'body': '''try {if(Get-Command "DotfileLoaded" -ErrorAction stop){}}
        Catch {Invoke-Expression ". $env:userprofile/.dotfiles/windows/source/function.ps1"}
        DotfileLoaded'''
